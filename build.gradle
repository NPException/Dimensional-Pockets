buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'java'

compileJava.options.encoding = 'UTF-8'

apply plugin: 'forge'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

version = "1.0.3"
group = "net.gtn.dimensionalpocket"
archivesBaseName = "DimensionalPockets-1.7.10"

sourceSets {
    main {
        java {
            srcDir "./java"
			srcDir "./api"
			//srcDir "./optionals"
			srcDir "../WormholeAPI/src/main/java"
			srcDir "../GameAnalyticsAPI/src/main/java"
        }
        resources {
            srcDir "./resources"
        }
    }
}
 
minecraft {
    version = "1.7.10-10.13.4.1448-1.7.10"
	mappings = 'stable_12'
    runDir = "eclipse"
}

repositories {
    maven { url = "http://maven.cil.li/" }
}
dependencies {
	compile fileTree('eclipse/mods')   
			// compile files('path/to/file.jar')
			
	compile "li.cil.oc:OpenComputers:MC1.7.10-1.6.+:api"
			
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

configurations.compile.copy().each { file ->
    logger.lifecycle "Processing ${file.path}..."
    copy {
        from(zipTree(file.path)) {
            includeEmptyDirs = false
            include '**/*_at.cfg'
        }
        into('src/api/resources/at')
    }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
	classifier = 'universal'
    manifest {
        attributes 'FMLAT': 'dimensionalPockets_at.cfg'
    }
}

// add source jar
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'source'
}

// deobf jars
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
//    manifest {
//        attributes 'FMLAT' : 'iChunUtil-deobf_at.cfg'
//    }
}

// make sure all of these happen when we run build
build.dependsOn sourceJar, deobfJar
